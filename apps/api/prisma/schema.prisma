// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerificationType {
  EMAIL
  PHONE
}

model User {
  id                Int                 @id @default(autoincrement())
  userId            String              @unique @default(uuid())
  firstName         String
  lastName          String
  email             String
  password          String
  telephone         String
  countryId         Int
  CGU               Boolean
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  isAdmin           Boolean             @default(false)
  verifiedEmail     Boolean             @default(false)
  verifiedPhone     Boolean             @default(false)
  banned            Boolean             @default(false)
  country           Country             @relation(fields: [countryId], references: [id])
  VerificationCodes VerificationCodes[]
  TraderFollows     TraderFollows[]
  UserSubscription  UserSubscription[]
  PasswordReset PasswordReset[]

  @@unique([email, verifiedEmail])
  @@unique([telephone, verifiedPhone])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])
}

model VerificationCodes {
  id        Int              @id @default(autoincrement())
  userId    Int
  code      Int
  type      VerificationType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id])
}

model Subscription {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  price            Int
  level            Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  UserSubscription UserSubscription[]
}

model UserSubscription {
  id             Int          @id @default(autoincrement())
  userId         Int
  subscriptionId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  User           User         @relation(fields: [userId], references: [id])
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model Theme {
  id                Int       @id @default(autoincrement())
  name              String
  subscriptionLevel Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  Article           Article[]
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  hidden    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  themesId  Int
  Theme     Theme    @relation(fields: [themesId], references: [id])

}

model Country {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User[]
}

model CryptoHolding {
  id     Int      @id @default(autoincrement())
  token  String
  price  Int
  amount Int
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
}

model CryptoJournal {
  id      Int      @id @default(autoincrement())
  message DateTime @default(now())
  date    DateTime @default(now())
}

model CuratedTrader {
  id            Int             @id @default(autoincrement())
  name          String
  rank          Int
  clientId      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  displayed     Boolean         @default(true)
  TraderFollows TraderFollows[]
}

model TraderFollows {
  id            Int           @id @default(autoincrement())
  userId        Int
  traderId      Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  User          User          @relation(fields: [userId], references: [id])
  CuratedTrader CuratedTrader @relation(fields: [traderId], references: [id])

}
