// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerificationType {
  EMAIL
  PHONE
}

enum PaymentType {
  SUBSCRIPTION
  ONETIME
}

enum OfferType {
  POURCENTAGE
  FIXED
}

enum PaymentProvider {
  MOLLIE
  PAYLINE
}

model User {
  id                  Int                 @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String              @unique
  password            String
  telephone           String
  CGU                 Boolean
  note                String?
  telegramId          Int?                @unique
  telegramLinkingCode String              @unique @default(uuid())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  isAdmin             Boolean             @default(false)
  verifiedEmail       Boolean             @default(false)
  verifiedPhone       Boolean             @default(false)
  banned              Boolean             @default(false)
  VerificationCodes   VerificationCodes[]
  TraderFollows       TraderFollows[]
  UserSubscription    UserSubscription[]
  PasswordReset       PasswordReset[]
  OfferUsage          OfferUsage[]

}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationCodes {
  id        Int              @id @default(autoincrement())
  userId    Int
  code      Int
  type      VerificationType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  refreshRate      Int // in days
  subscriptionType PaymentType
  price            Int
  hidden           Boolean            @default(false)
  isBestValue      Boolean            @default(false)
  hasFreeTrial     Boolean            @default(false)
  freeTrialDays    Int                @default(0)
  level            Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  UserSubscription UserSubscription[]
  Offer            Offer[]
}

model UserSubscription {
  id             Int          @id @default(autoincrement())
  userId         Int
  subscriptionId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  price          Int
  paymentId      String  // exteneral payment id
  customerId     String // external customer id
  status         String // updated external status
  paymentProdvider String //  payment provider
  User           User         @relation(fields: [userId], references: [id])
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

model Offer {
  id             Int          @id @default(autoincrement())
  value          Int
  offerType      OfferType
  subscriptionId Int
  singleUse      Boolean      @default(false)
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  OfferUsage     OfferUsage[]
}

model OfferUsage {
  id      Int      @id @default(autoincrement())
  offerId Int
  userId  Int
  date    DateTime @default(now())
  Offer   Offer    @relation(fields: [offerId], references: [id])
  User    User     @relation(fields: [userId], references: [id])
}

model Theme {
  id                Int       @id @default(autoincrement())
  name              String
  subscriptionLevel Int
  iconUrl           String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  Article           Article[]
}

model Article {
  id                    Int                     @id @default(autoincrement())
  title                 String
  content               String
  bannerUrl             String
  headerUrl             String
  podcastUrl            String?
  description           String?
  salaireMoy            String?
  tarificationMoy       String?
  outils                String?
  creation              String?
  utilisateurs          String?
  necessiteAudicance    String?
  financement           String?
  hidden                Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now())
  themeId               Int
  Theme                 Theme                   @relation(fields: [themeId], references: [id], onDelete: Cascade)
  Recommandation        Recommandation[]
  ArticleRecommandation ArticleRecommandation[]
}

model Recommandation {
  id        Int     @id @default(autoincrement())
  articleId Int
  Article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  ArticleRecommandation ArticleRecommandation[]
}

model ArticleRecommandation {
  id                   Int            @id @default(autoincrement())
  referenceArticleId   Int
  recommandedArticleId Int
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @default(now())
  Article              Article        @relation(fields: [referenceArticleId], references: [id], onDelete: Cascade)
  Recommandation       Recommandation @relation(fields: [recommandedArticleId], references: [id], onDelete: Cascade)

}

model Country {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CryptoHolding {
  id        Int      @id @default(autoincrement())
  token     String
  price     Int
  amount    Int
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
}

model CryptoJournal {
  id      Int      @id @default(autoincrement())
  message DateTime @default(now())
  date    DateTime @default(now())
}

model CuratedTrader {
  id            Int             @id @default(autoincrement())
  name          String
  rank          Int
  clientId      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  displayed     Boolean         @default(true)
  TraderFollows TraderFollows[]
}

model TraderFollows {
  id            Int           @id @default(autoincrement())
  userId        Int
  traderId      Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  CuratedTrader CuratedTrader @relation(fields: [traderId], references: [id], onDelete: Cascade)

}

model Affiliation {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  color     String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  displayed Boolean  @default(true)
}

model Broker {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  displayed Boolean  @default(true)
}

model Config {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
